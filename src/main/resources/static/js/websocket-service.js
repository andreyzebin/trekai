export class WebSocketService {
    constructor(baseUrl) {
        this.baseUrl = baseUrl;
        this.stompClient = null;
        this.socket = null;
        console.log('üîå WebSocketService created with baseUrl:', baseUrl);
    }

    connect(itemId, callbacks = {}) {
        console.log('üîó Connecting WebSocket for item:', itemId);

        try {
            const wsUrl = `${this.baseUrl}ws`;
            console.log('üåê Creating SockJS connection to:', wsUrl);

            this.socket = new SockJS(wsUrl);
            this.stompClient = Stomp.over(this.socket);

            // Enable debug logging
            this.stompClient.debug = (message) => {
                console.log('üîç STOMP Debug:', message);
            };

            console.log('üîÑ Attempting STOMP connection...');

            this.stompClient.connect({}, () => {
                console.log('‚úÖ STOMP connection established');
                callbacks.onConnected?.();

                const subscriptionTopic = `/topic/item/${itemId}`;
                console.log('üì° Subscribing to topic:', subscriptionTopic);

                this.stompClient.subscribe(subscriptionTopic, (message) => {
                    console.log('üì® Received message on topic:', subscriptionTopic, message);
                    callbacks.onMessage?.(message);
                });

                console.log('‚úÖ WebSocket subscription active');
            });

            this.socket.onclose = (event) => {
                console.log('üîå WebSocket closed:', event);
                callbacks.onDisconnected?.(event);
            };

            this.socket.onerror = (error) => {
                console.error('‚ùå WebSocket error:', error);
                callbacks.onError?.(error);
            };

            console.log('‚úÖ WebSocket connection initiated');

        } catch (error) {
            console.error("‚ùå WebSocket initialization error:", error);
            callbacks.onError?.(error);
        }
    }

    disconnect() {
        console.log('üîå Disconnecting WebSocket');
        if (this.stompClient) {
            this.stompClient.disconnect();
            console.log('‚úÖ STOMP client disconnected');
        }
        if (this.socket) {
            this.socket.close();
            console.log('‚úÖ WebSocket closed');
        }
    }

    getConnectionStatus() {
        return this.stompClient?.connected ? 'connected' : 'disconnected';
    }
}