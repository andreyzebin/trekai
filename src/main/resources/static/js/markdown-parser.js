export class MarkdownParser {
    static parseTelegramMarkdown(text) {
        if (!text) return '';

        console.log('üìù Parsing Telegram Markdown:', text);

        // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        let html = this.sanitizeHtml(text);

        // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞
        const codeBlocks = [];
        html = html.replace(/```([\s\S]*?)```/g, (match, code) => {
            codeBlocks.push(code);
            return `:::CODEBLOCK${codeBlocks.length - 1}:::`;
        });

        const inlineCodes = [];
        html = html.replace(/`([^`]+)`/g, (match, code) => {
            inlineCodes.push(code);
            return `:::INLINECODE${inlineCodes.length - 1}:::`;
        });

        // –ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç
        html = html.replace(/(\*\*)(?=\S)([^\r]*?\S)\1/g, '<strong>$2</strong>');
        html = html.replace(/(__)(?=\S)([^\r]*?\S)\1/g, '<strong>$2</strong>');

        // –ö—É—Ä—Å–∏–≤
        html = html.replace(/(?<!\\)\/([^\/\r]+)\/(?!\\)/g, '<em>$1</em>');
        html = html.replace(/(?<!\\)\_([^\_\r]+)\_(?!\\)/g, '<em>$1</em>');

        // –°—Å—ã–ª–∫–∏
        html = html.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer">$1</a>');

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–ª–æ–∫–∏ –∫–æ–¥–∞
        html = html.replace(/:::CODEBLOCK(\d+):::/g, (match, index) => {
            return `<pre><code>${codeBlocks[parseInt(index)]}</code></pre>`;
        });

        html = html.replace(/:::INLINECODE(\d+):::/g, (match, index) => {
            return `<code>${inlineCodes[parseInt(index)]}</code>`;
        });

        // –ü–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        html = html.replace(/\n/g, '<br>');

        console.log('‚úÖ Parsed to HTML:', html);
        return html;
    }

    static sanitizeHtml(html) {
        const div = document.createElement('div');
        div.textContent = html;
        return div.innerHTML;
    }

    static formatComment(comment) {
        if (!comment) return '';
        return this.parseTelegramMarkdown(comment);
    }
}