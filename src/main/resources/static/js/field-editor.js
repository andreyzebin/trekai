export class FieldEditor {
    constructor(itemView) {
        this.itemView = itemView;
        console.log('üìù FieldEditor created');
    }

    initEditableFields() {
        const editableContainers = document.querySelectorAll('.editable-container');
        console.log(`üîç Found ${editableContainers.length} editable containers`);

        editableContainers.forEach((container, index) => {
            const display = container.querySelector('.editable-display');
            const input = container.querySelector('.editable-input');

            if (display && input) {
                console.log(`‚öôÔ∏è Setting up editable field ${index + 1}:`, {
                    id: input.id,
                    type: input.type
                });

                display.addEventListener('focus', () => {
                    console.log('üëÜ Field focus:', input.id);
                    this.activateEditor(container);
                });

                display.addEventListener('click', () => {
                    console.log('üñ±Ô∏è Field click:', input.id);
                    this.activateEditor(container);
                });

                input.addEventListener('blur', () => {
                    console.log('üëã Field blur:', input.id);
                    this.deactivateEditor(container);
                });

                // –û–±—Ä–∞–±–æ—Ç–∫–∞ Escape –¥–ª—è –æ—Ç–º–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏–π
                input.addEventListener('keydown', (e) => {
                    if (e.key === 'Escape') {
                        console.log('‚éã Escape pressed, canceling edit');
                        this.deactivateEditor(container, false); // –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å
                        e.preventDefault();
                    }
                });
            }
        });

        console.log('‚úÖ Editable fields initialization completed');
    }

    activateEditor(container) {
        console.log('üé¨ Activating editor');
        const display = container.querySelector('.editable-display');
        const input = container.querySelector('.editable-input');

        if (!display || !input) {
            console.warn('‚ö†Ô∏è Editor elements not found in container');
            return;
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—Ç–º–µ–Ω—ã
        input.dataset.tempOriginalValue = input.dataset.originalValue;

        display.classList.add('hidden');
        input.value = input.dataset.originalValue || '';
        input.classList.remove('hidden');

        console.log('üîç Editor activated for field:', input.id);

        setTimeout(() => {
            input.focus();
            console.log('üéØ Focus set to input field');

            if (input.type === 'text' && input.hasAttribute('placeholder') &&
                input.getAttribute('placeholder') === 'dd-MM-yyyy') {
                input.setSelectionRange(0, 0);
                console.log('üìÖ Date field - cursor set to start');
            } else if (input.type === 'text' || input.tagName === 'TEXTAREA') {
                const length = input.value.length;
                input.setSelectionRange(length, length);
                console.log('üìù Text field - cursor set to end');
            }
        }, 10);
    }

    deactivateEditor(container, save = true) {
        console.log('‚èπÔ∏è Deactivating editor, save:', save);
        const display = container.querySelector('.editable-display');
        const input = container.querySelector('.editable-input');
        const editText = container.querySelector('.edit-text');

        if (!display || !input || !editText) {
            console.warn('‚ö†Ô∏è Editor elements not found for deactivation');
            return;
        }

        const newValue = input.value.trim();
        const originalValue = (input.dataset.originalValue || '').trim();

        console.log('üìä Field values:', { newValue, originalValue, changed: newValue !== originalValue });

        // –°–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ—Ç–æ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º
        if (save && newValue !== originalValue) {
            console.log('üîÑ Updating display immediately');

            // –î–ª—è date –ø–æ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            if (input.type === 'text' && input.hasAttribute('placeholder') &&
                input.getAttribute('placeholder') === 'dd-MM-yyyy') {

                if (this.itemView.dateFieldHandler.validateDateField(input)) {
                    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å –≥–æ–¥–æ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    const formattedValue = this.itemView.dateFieldHandler.getFullDateValue(input);
                    editText.textContent = formattedValue;
                    // –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ input –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                    input.value = formattedValue;
                    console.log('üìÖ Date formatted for display and backend:', formattedValue);
                } else {
                    // –ï—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    editText.textContent = originalValue;
                    input.value = originalValue;
                    console.log('‚ùå Date validation failed, restoring original value');
                }
            } else {
                // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª–µ–π –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                editText.textContent = newValue;
                console.log('‚úÖ Text updated in display');
            }
        } else if (!save) {
            // –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π - –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            editText.textContent = input.dataset.tempOriginalValue || originalValue;
            input.value = input.dataset.tempOriginalValue || originalValue;
            console.log('‚ùå Edit canceled, restoring original value');
        }

        // –í—Å–µ–≥–¥–∞ —Å–∫—Ä—ã–≤–∞–µ–º input –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º display
        display.classList.remove('hidden');
        input.classList.add('hidden');

        // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å —Å–µ—Ä–≤–µ—Ä–æ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (save && newValue !== originalValue) {
            if (input.type === 'text' && input.hasAttribute('placeholder') &&
                input.getAttribute('placeholder') === 'dd-MM-yyyy') {

                if (this.itemView.dateFieldHandler.validateDateField(input)) {
                    console.log('üìÖ Date field changed, triggering patch');
                    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ input —É–∂–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å –≥–æ–¥–æ–º
                    const finalValue = this.itemView.dateFieldHandler.getFullDateValue(input);
                    input.value = finalValue; // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ–±–Ω–æ–≤–ª—è–µ–º –µ—â–µ —Ä–∞–∑

                    this.itemView.patchField(input).then(() => {
                        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª—è–µ–º originalValue
                        input.dataset.originalValue = input.value;
                        console.log('‚úÖ Server sync completed');
                    }).catch(error => {
                        console.error('‚ùå Server sync failed:', error);
                        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        editText.textContent = originalValue;
                        input.value = originalValue;
                        input.dataset.originalValue = originalValue;
                    });
                }
            } else {
                console.log('üìù Field changed, triggering patch');
                this.itemView.patchField(input).then(() => {
                    input.dataset.originalValue = newValue;
                    console.log('‚úÖ Server sync completed');
                }).catch(error => {
                    console.error('‚ùå Server sync failed:', error);
                    editText.textContent = originalValue;
                    input.value = originalValue;
                    input.dataset.originalValue = originalValue;
                });
            }
        }

        console.log('‚úÖ Editor deactivated');
    }
}